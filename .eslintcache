[{"C:\\Users\\HP\\Desktop\\github\\boxing-timer\\src\\index.js":"1","C:\\Users\\HP\\Desktop\\github\\boxing-timer\\src\\App.js":"2","C:\\Users\\HP\\Desktop\\github\\boxing-timer\\src\\components\\Options.js":"3","C:\\Users\\HP\\Desktop\\github\\boxing-timer\\src\\components\\Timer.js":"4","C:\\Users\\HP\\Desktop\\github\\boxing-timer\\src\\components\\Rounds.js":"5","C:\\Users\\HP\\Desktop\\github\\boxing-timer\\src\\utils\\workoutTypes.js":"6"},{"size":219,"mtime":1607589923920,"results":"7","hashOfConfig":"8"},{"size":1136,"mtime":1607652600551,"results":"9","hashOfConfig":"8"},{"size":3155,"mtime":1607653494711,"results":"10","hashOfConfig":"8"},{"size":4193,"mtime":1607678927497,"results":"11","hashOfConfig":"8"},{"size":444,"mtime":1607652244689,"results":"12","hashOfConfig":"8"},{"size":803,"mtime":1607586270445,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1203p8q",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\HP\\Desktop\\github\\boxing-timer\\src\\index.js",[],["29","30"],"C:\\Users\\HP\\Desktop\\github\\boxing-timer\\src\\App.js",[],"C:\\Users\\HP\\Desktop\\github\\boxing-timer\\src\\components\\Options.js",[],"C:\\Users\\HP\\Desktop\\github\\boxing-timer\\src\\components\\Timer.js",["31"],"import React, { useEffect, useState } from \"react\";\r\nimport { Button, Card, Badge } from \"react-bootstrap\";\r\nimport bell from \"../utils/starting-bell.mp3\";\r\n\r\nconst Timer = ({ options, roundHandler, currentRound }) => {\r\n  const [display, setDisplay] = useState(\"0:00\");\r\n  const [countdownActive, toggleCountdown] = useState(true);\r\n  const [isRestPeriod, toggleIsRestPeriod] = useState(false);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [counter, setCounter] = useState(0);\r\n  const [buttonSettings, setButtonSettings] = useState({\r\n    variant: \"info\",\r\n    text: \"Customize your options and hit start\",\r\n  });\r\n\r\n  const workout = {\r\n    resetWorkout: () => {\r\n      setIsActive(false);\r\n      setCounter(0);\r\n      setDisplay(\"0:00\");\r\n      toggleCountdown(true);\r\n      toggleIsRestPeriod(false);\r\n      roundHandler(1);\r\n      setButtonSettings({\r\n        ...buttonSettings,\r\n        text: \"Customize your options and hit start\",\r\n        variant: \"info\",\r\n      });\r\n    },\r\n\r\n    startRestBreak: () => {\r\n      setCounter(options.timeInBreaks);\r\n      roundHandler(currentRound + 1);\r\n      setButtonSettings({\r\n        ...buttonSettings,\r\n        text: \"REST\",\r\n        variant: \"danger\",\r\n      });\r\n      toggleIsRestPeriod(false);\r\n    },\r\n\r\n    startRound: () => {\r\n      setCounter(options.timeInRound);\r\n      setButtonSettings({\r\n        ...buttonSettings,\r\n        text: \"FIGHT!\",\r\n        variant: \"success\",\r\n      });\r\n\r\n      toggleIsRestPeriod(true);\r\n    },\r\n  };\r\n\r\n  const counterHandlers = {\r\n    handleCountdown: () => {\r\n      if (!countdownActive) return;\r\n      toggleCountdown(false);\r\n      setButtonSettings({\r\n        ...buttonSettings,\r\n        text: \"GET READY!\",\r\n        variant: \"warning\",\r\n      });\r\n      setCounter((counter) => counter + options.countdown);\r\n    },\r\n\r\n    handleRoundEnd: () => {\r\n      if (countdownActive || counter !== 0 || !isRestPeriod) return;\r\n\r\n      if (options.numberOfRounds === currentRound) {\r\n        workout.resetWorkout();\r\n      } else {\r\n        workout.startRestBreak();\r\n      }\r\n    },\r\n\r\n    handleRoundStart: () => {\r\n      if (counter !== 0 || countdownActive || isRestPeriod) return;\r\n      workout.startRound();\r\n    },\r\n  };\r\n\r\n  const timer = {\r\n    runCounterHandlers: () => {\r\n      counterHandlers.handleCountdown();\r\n      counterHandlers.handleRoundEnd();\r\n      counterHandlers.handleRoundStart();\r\n    },\r\n\r\n    toggleTimer: () => {\r\n      setIsActive(!isActive);\r\n    },\r\n\r\n    displayHandler: () => {\r\n      if (counter === 0 && !countdownActive) {\r\n        setDisplay(\"0:00\");\r\n        let bellAudio = new Audio(bell);\r\n        bellAudio.play();\r\n      }\r\n\r\n      const seconds = counter % 60;\r\n      const minutes = Math.floor(counter / 60);\r\n\r\n      let secondsText;\r\n\r\n      if (seconds < 10) {\r\n        secondsText = `0${seconds}`;\r\n      } else {\r\n        secondsText = seconds.toString();\r\n      }\r\n\r\n      setDisplay(`${minutes}:${secondsText}`);\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    let intervalID;\r\n    if (currentRound > options.numberOfRounds) {\r\n      workout.resetWorkout();\r\n    }\r\n\r\n    if (isActive) {\r\n      timer.runCounterHandlers();\r\n      intervalID = setInterval(() => {\r\n        setCounter((counter) => counter - 1);\r\n      }, 1000);\r\n    }\r\n\r\n    timer.displayHandler();\r\n\r\n    return () => clearInterval(intervalID);\r\n  }, [isActive, counter]);\r\n\r\n  return (\r\n    <Card className=\"light-box-shadow\">\r\n      <Badge variant={buttonSettings.variant} className=\"timer-header\">\r\n        {buttonSettings.text}\r\n      </Badge>\r\n      <Card.Title className=\"timer-display\">{display}</Card.Title>\r\n\r\n      <div className=\"mx-auto p-3\">\r\n        <Button className=\"m-1 pr-3 pl-3\" onClick={() => timer.toggleTimer()}>\r\n          {!isActive ? (\r\n            <i className=\"fas fa-play\"></i>\r\n          ) : (\r\n            <i className=\"fas fa-pause\"></i>\r\n          )}\r\n        </Button>\r\n        <Button\r\n          disabled={isActive}\r\n          className=\"m-1 pr-3 pl-3\"\r\n          onClick={() => workout.resetWorkout()}\r\n        >\r\n          <i className=\"fas fa-stop\"></i>\r\n        </Button>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","C:\\Users\\HP\\Desktop\\github\\boxing-timer\\src\\components\\Rounds.js",["32","33","34","35"],"import React, { useState, useEffect } from \"react\";\r\nimport { Card, Form } from \"react-bootstrap\";\r\nimport { styles } from \"../utils/workoutTypes\";\r\nconst Rounds = ({ currentRound, numberOfRounds }) => {\r\n  return (\r\n    <Card className=\"light-box-shadow\">\r\n      <Card.Header>\r\n        <Card.Title>\r\n          Round {currentRound}/{numberOfRounds}\r\n        </Card.Title>\r\n      </Card.Header>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Rounds;\r\n","C:\\Users\\HP\\Desktop\\github\\boxing-timer\\src\\utils\\workoutTypes.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":131,"column":6,"nodeType":"42","endLine":131,"endColumn":25,"suggestions":"43"},{"ruleId":"44","severity":1,"message":"45","line":1,"column":17,"nodeType":"46","messageId":"47","endLine":1,"endColumn":25},{"ruleId":"44","severity":1,"message":"48","line":1,"column":27,"nodeType":"46","messageId":"47","endLine":1,"endColumn":36},{"ruleId":"44","severity":1,"message":"49","line":2,"column":16,"nodeType":"46","messageId":"47","endLine":2,"endColumn":20},{"ruleId":"44","severity":1,"message":"50","line":3,"column":10,"nodeType":"46","messageId":"47","endLine":3,"endColumn":16},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentRound', 'options.numberOfRounds', 'timer', and 'workout'. Either include them or remove the dependency array.","ArrayExpression",["53"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Form' is defined but never used.","'styles' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"54","fix":"55"},"Update the dependencies array to be: [isActive, counter, currentRound, options.numberOfRounds, timer, workout]",{"range":"56","text":"57"},[3371,3390],"[isActive, counter, currentRound, options.numberOfRounds, timer, workout]"]